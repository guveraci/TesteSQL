#!groovy

import com.mapfre.pod.Container
import com.mapfre.pod.ContainerType
import com.mapfre.pod.ContainerTypeCustom
import com.mapfre.pod.ContainerSize
import com.mapfre.pod.ContainerVolume

//Lib global tron, lib de seguranca global e de arquiterura Corporativa
@Library(['tron-pipeline-library-comun', 'security-library', 'global-pipeline-library-corparchitecture']) libcommon
//Lib local para configuracao de deploy
@Library('br-business-config-deploy') libconfig
// Content for email to committers
def GIT_COMMIT_EMAIL
// Artifacts for deployment proyect
def libModules = ".deploy/libModules.yml"

// BUSINESS_API dependencies
// TODO clarify and confirm BUSINESS_API dependencies
def dependencies = [] as String[]

//NOME DA ORGANIZACAO
def DEVOPS_PLATFORM_ORGANIZATION = 'org-mapfrebrasil'
//INTEGRACAO COM KEYVAULT
def keyVaultIds = [ 
  'api-ws-ama-asd-username',
  'api-ws-ama-asd-password',
  'svc-asd-hml-username',
  'svc-asd-hml-password',
  'svc-asd-prd-username',
  'svc-asd-prd-password',
  'qa-api-brbusiness-user',
  'qa-api-brbusiness-pass'
] as String[]

def variableIds = [ 
  'ws.ama.asc.user',
  'ws.ama.asc.pass',
  'usr.aplicacoes.hml.user',
  'usr.aplicacoes.hml.pass',
  'usr.aplicacoes.prd.user',
  'usr.aplicacoes.prd.pass',
  'qa.api.brbusiness.user',
  'qa.api.brbusiness.pass'
] as String[]

//Start of Pipeline
pipeline {

    agent {
        kubernetes {
            yaml getPodTemplate(DEVOPS_PLATFORM_ORGANIZATION, [
                ['maven', new ContainerTypeCustom('acrmapfredevops.azurecr.io/mapfre/brasil/tron/br-tron-apis:latest', [ContainerVolume.NFS_CACHE, ContainerVolume.MAVEN_SETTINGS]), ContainerSize.EXTRA_LARGE_MIN_MEM],
                ['sonar-scanner-cli', ContainerType.SONAR_SCANNER_CLI_STABLE, ContainerSize.EXTRA_LARGE],
                ['azure-cli', ContainerType.AZURE_CLI_STABLE, ContainerSize.LARGE]
            ] as Container[], true)
        }
    }

    // Timeout execution
    options {
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
        buildDiscarder(logRotator(daysToKeepStr: '7', numToKeepStr: '5', artifactNumToKeepStr: '5'))
        // Credencial de autenticacao do SonarQube no cofre do KeyVault
        azureKeyVault([
            [envVariable: 'SONARTOKEN', name: 'sonar-access-token', secretType: 'Secret']
        ])
	}

    environment {
        // Jenkins credential id to authenticate to artifact repository
        ARTIFACT_REPOSITORY_CREDENTIAL_ID = "app-user-azure-artifacts"
        GIT_AUTH = credentials('app-jenkins-tron-bitbucket')

        POM_VERSION = getPomVersion()
        ARTIFACT_ID = getArtifactId()
        GROUP_ID = getGroupId()
        ADDITIONAL_PROFILES = 'INCLUDE_DEPENDENCIES'

        INITIALIZE_ENV_VARIABLES_TRON = initializeVarsTron()
        LOG_LEVEL 							= "DEBUG"
        // Variaveis para SonarQube Enterprise
        SONAR_URL 							= "http://10.206.64.168:9000"
        SONAR_ENVIRONMENT 					= 'SonarQube-Enterprise' // Nombre dado en la configurcion de Jenkins a ese Sonar Server
        //SONAR_TOKEN                       = 'sonar-access-token-enterprise' // Credential ID del token de Sonar generado por equipo QA
        SONAR_PROJECT_NAME 					= 'br-business-api'
        SONAR_PROJECT_KEY 					= 'br-business-api'
    }

    stages {

        stage('Prepare Environment') {
            steps {
                initStageKPI()
                // Print global vars and kpis of jenkinsfile environment
                showEnvironment()
 			}
            post {
                success {
                    successStageKPI()
                }
                failure {
                    failureStageKPI()
                }
            }
        }
        // 1 Stage de seguranca - This is a security stage that must be executed before building any code or image.
        stage('Security pre-build') {
            steps {
                script {
                    secPreBuild()
                }
            }
        }
        // Prepare versions while promoting code through flow SNAPSHOT -> RC -> RELEASE -> HOTFIX
        stage('Prepare Promotion') {
            when {
                anyOf {
                    branch 'master'
                    branch 'homolog'
                    branch 'sustain'
                    branch 'hml-sustain'
                    branch 'pre-prod'
                }
            }
            steps {
                initStageKPI()
                container('maven') {
                    promotionApisTronBrasil env.BRANCH_NAME
                }
                // promote dependencies
                promoteDependencies(env.BRANCH_NAME, dependencies)
                // promotion .war file jboss-deployment-structure.xml
                promoteNewtronApiJbossDescriptor()
            }
            post {
                success {
                    successStageKPI()
                }
                failure {
                    failureStageKPI()
                }
            }
        }

        // Compile with Maven
        stage('Build') {
            //    when {
            //      not {
            //        anyOf {
            //          branch 'PR*'
            //        }
            //      }
            //    }
            steps {
                initStageKPI()
                    container('maven') {
                        sh "mvn -version"
                        buildWithProfilesAndKeyVault(getBuildProfileBrasil(env.BRANCH_NAME) + "," + ADDITIONAL_PROFILES, keyVaultIds, variableIds, ARTIFACT_REPOSITORY_CREDENTIAL_ID)
                    }
                }
            post {
                success {
                    successStageKPI()
                }
                failure {
                    failureStageKPI()
                }
            }
        }
        // 2 Stage de seguranca - Sonar
        stage('SonarQube analysis') {
            tools {
                jdk "jdk-11" // the name you have given the JDK installation using the JDK manager (Global Tool Configuration)
            }
            steps {
                initStageKPI()
                container('maven') {
                    sh "java -version" // Show java version on log
                    sh "mvn clean package sonar:sonar -Dmaven.test.skip=true -Dsonar.projectName=${env.SONAR_PROJECT_NAME} -Dsonar.projectKey=${env.SONAR_PROJECT_KEY} -Dsonar.host.url=${env.SONAR_URL} -Dsonar.login=$SONARTOKEN"
                }
            }
            post {
                success {
                    successStageKPI()
                }
                failure {
                    failureStageKPI()
                }
            }
        }
        // 3 Stage de seguranca -  This is a security stage that must be executed after building any code and after Quality stage.
        stage('Security post-build') {
            steps {
                script {
                    secPostBuild()
                }
            }
        }
        // Publish to artifact repository
        stage('Publish') {
            when {
                anyOf {
                    branch 'develop'
                    branch 'homolog'
                    branch 'master'
          	        branch 'sustain'
          	        branch 'hml-sustain'
          	        branch 'pre-prod'
                }
            }
            steps {
                initStageKPI()
                container('maven') {
                    //publish ARTIFACT_REPOSITORY_CREDENTIAL_ID
                    publishWithKeyVault(ARTIFACT_REPOSITORY_CREDENTIAL_ID, getBuildProfileBrasil(env.BRANCH_NAME) + "," + ADDITIONAL_PROFILES, keyVaultIds, variableIds)
                }
            }
            post {
                success {
                    successStageKPI()
                }
                failure {
                    failureStageKPI()
                }
            }
        }

        stage('RC Promotion') {
            when {
            	anyOf {
          		branch 'homolog'
          		branch 'hml-sustain'
          		branch 'pre-prod'
        	}
            }
            environment {
                POM_VERSION = getPomVersion()
            }
            steps {
                initStageKPI()
                // push promotion
                gitFetch()
                gitCheckout env.BRANCH_NAME
                // commit RC promotion in release branch
                gitCommit "promotion to RC completed (" + env.POM_VERSION + ")"
                // push all changes
                gitPush()
                // create tag
                gitTag(env.POM_VERSION, "new tag for release candidate " + env.POM_VERSION)
                // push all tags
                gitPushTags()
            }
            post {
                success {
                    successStageKPI()
                }
                failure {
                    failureStageKPI()
                }
            }
        }

        // Genera uma versao snapshot aumentando ao pathversion Ex. 1.1.0-SNAPSHOT -> 1.1.0-RC -> 1.1.0 + 1.1.1-SNAPSHOT
        stage('Next Snapshot Promotion') {
            when {
                allOf {
                    branch 'master';
                    expression {
                        return isDevFeature()
                    }
                }
            }
            environment {
                developmentBranch = "develop"
            }
            steps {
                initStageKPI()
                // git checkout development
                gitCheckout developmentBranch
                // git merge env.BRANCH_NAME
                gitMerge env.BRANCH_NAME
                // mvn promotion to snapshot
                container('maven') {
                    promotion developmentBranch
                }
                // promote dependencies
                promoteDependencies(developmentBranch, dependencies)
                // promotion .war file jboss-deployment-structure.xml
                promoteNewtronApiJbossDescriptor()
                // commit next SNAPSHOT in development branch
                gitCommit "promotion to next SNAPSHOT completed (" + getPomVersion() + ")"
                // push all changes
                gitPush()
            }
            post {
                success {
                    successStageKPI()
                }
                failure {
                    failureStageKPI()
                }
            }
        }

        // Fin da função
        stage('Release Promotion') {
            when {
                branch 'master'
            }
            environment {
                POM_VERSION = getPomVersion()
            }
            steps {
                // print release KPIs
                initStageKPI()
                releaseKPI()
                // git operations
                gitFetch()
                gitCheckout env.BRANCH_NAME
                // commit RC promotion in release branch
                gitCommit "promotion to RELEASE completed (" + env.POM_VERSION + ")"
                // push all changes
                gitPush()
                // create tag
                gitTag(env.POM_VERSION, "new tag for release " + env.POM_VERSION)
                // push all tags
                gitPushTags()
            }
            post {
                success {
                    successStageKPI()
                }
                failure {
                    failureStageKPI()
                }
            }
        }

        stage('Hotfix Promotion') {
            when {
        branch 'support/*'
            }
            environment {
                POM_VERSION = getPomVersion()
            }
            steps {
                initStageKPI()
                // push promotion
                gitFetch()
                gitCheckout env.BRANCH_NAME
                // commit RC promotion in release branch
                gitCommit "promotion to next HOTFIX completed (" + env.POM_VERSION + ")"
                // push all changes
                gitPush()
                // create tag
                gitTag(env.POM_VERSION, "new tag for hotfix release " + env.POM_VERSION)
                // push all tags
                gitPushTags()
            }
            post {
                success {
                    successStageKPI()
                }
                failure {
                    failureStageKPI()
                }
            }
        }

        // TODO review whether this stage is needed for Brasil
        // Este stage se ejecuta si el desencadenante del job ha sido un pull request solicitando un merge entre la rama homolog y master.
        // Resuelve los conflictos generados por la propia promoción con una estrategia theirs (homolog)
        /*stage('Advanced Merge (Homolog -> Master)') {
            when {
                allOf {
                    environment name: 'CHANGE_BRANCH', value: 'homolog';
                    environment name: 'CHANGE_TARGET', value: 'master';
                }
            }
            steps {
                initStageKPI()
                gitFetch()
                gitCheckout env.CHANGE_TARGET
                gitMergeWithResolveConflicts CHANGE_BRANCH
                gitPush()
            }
            post {
                success {
                    successStageKPI()
                }
                failure {
                    failureStageKPI()
                }
            }
        }*/
        // 4 Stage de seguranca - This is a security stage that must be executed before deploying any app or service.
        stage('Security pre-deploy') {
            steps {
                script {
                    secPreDeploy()
                }
            }
        }
        // Deploy to JBoss
        stage('Deploy JBoss') {
            when {
                anyOf {
                    branch 'develop'
                    branch 'homolog'
                    branch 'master'
          	        branch 'sustain'
          	        branch 'hml-sustain'
          	        branch 'pre-prod'
                }
            }
            environment {
                GROUP_ID = getGroupId()
                ARTIFACT_ID = getArtifactId()
                POM_VERSION = getPomVersion()
            }
            steps {
                initStageKPI()
                retry(3) {
                    script() {
                        try {
                              // Adicionando regra para deploy em homologação
                            if (env.BRANCH_NAME == 'homolog') {
                                println("--Alteração versão libModules--")
                                //ajuste version libModules
                                sh "sed 's+SNAPSHOT+RC+g' -i ${libModules}"
                                
                            }
                            if (env.BRANCH_NAME == 'master') {
                                println("--Alteração versão libModules--")
                                //ajuste version libModules
                                sh "sed 's+-RC++g' -i ${libModules}"
                                
                            }
              		        // Fim regra
                            println("--Deploy JBoss--")
                            // step 1
                            exitCode = downloadModulesJboss(libModules)
                            if (exitCode > 0) {
                                currentBuild.result = 'FAILURE'
                                println("ERROR EXITCODE Deploy:Download Nexus-downloadModulesJboss: " + exitCode)
                            }

                            // step 2
                            deployCopyToJBoss1(libModules)

                            // step 3
                            commandResult = deployJBossCliBrasil(env.BRANCH_NAME, env.POM_VERSION, libModules)

                            if (commandResult > 0){
                                currentBuild.result = 'FAILURE'
                                println("ERROR EXITCODE deployJBossCli: " + commandResult)
                            }
                        } catch (Exception err) {
                            currentBuild.result = 'FAILURE'
                            println("libModules-error: " + err)
                        }
                    }
                }
            }
            post {
                always {
                    // Delete temp directory in remote server
                    deleteTempDir(env.BRANCH_NAME, libModules)
                }
                success {
                    successStageKPI()
                }
                failure {
                    failureStageKPI()
                }
            }
        }
        // 5 Stage de seguranca - This is a security stage that must be executed after deploying any image or application.
        stage('Security post-deploy') {
            steps {
                script {
                    secPostDeploy()
                }
            }
        }
       // Analysis code on Test Regression
        stage('Regression Test') {
            when {
              anyOf {
                branch 'develop'
                branch 'homolog'
                branch 'master'
                branch 'pre-prod'
              }
            }
            steps {
                initStageKPI()
                container('maven') {
                    script() {
                        try{
                            // Obtem o nome da branch atual
                            def branchName = env.BRANCH_NAME

                            // Executa um comando com base na branch
                            if (branchName == 'master') {
                                println("--Executando comando para a branch Master--")
                                // Testes que tenham a tag @req.GEt
                                sh 'mvn -f 2-INTEGRATION_TEST/QATests/ clean compile test -Dgroups=req.GEt -DurlServico=prod'
                            } else if (branchName == 'pre-prod') {
                                println("--Executando comando para a branch Pre-Prod--")
                                // Testes que tenham a tag @run_Business_and_EDGEs
                                sh 'mvn -f 2-INTEGRATION_TEST/QATests/ clean compile test -Dgroups=run_Only_Business -DurlServico=preprod'
                            } else if (branchName == 'homolog') {
                                println("--Executando comando para a branch Homolog--")
                                // Testes que tenham a tag @run_Business_and_EDGEs
                                sh 'mvn -f 2-INTEGRATION_TEST/QATests/ clean compile test -Dgroups=run_Only_Business -DurlServico=hml'
                            } else if (branchName == 'develop'){
                                println("--Executando comando para a branch Develop--")
                                // Testes que tenham a tag @req.GEt
                                sh 'mvn -f 2-INTEGRATION_TEST/QATests/ clean compile test -Dgroups=run_Only_Business -DurlServico=dev'
                            }
                             
                        }catch (Exception err) {
                            println('Erro ao executar o comando: ' + err)
                            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh 'exit 1'
                            }
                        }
                      }
                   }
//            post {
//              always {
//                  echo '--always--'
//                      showStageStatus()
//                  }
//              success {
//                  successStageKPI()
//              }
//              failure {
//                  failureStageKPI()
//               }
//            }
        }    
    }
}
    post {
        always {
            echo '--always--'
            logstashSend failBuild: false, maxLines: 150000
        }
        success {
            echo '--success--'
        }
        failure {
            echo '--failure--'
                script {
                    GIT_COMMIT_EMAIL = sh (
                        script: 'git --no-pager show -s --format=\'%ae\'',
                        returnStdout: true
                    ).trim()
                }
            echo "MAIL RECIPIENT(S): ${GIT_COMMIT_EMAIL}"
            sendFailureEmail GIT_COMMIT_EMAIL
        }
    }
}